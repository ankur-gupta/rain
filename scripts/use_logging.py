# This file shows you an example of how to use print logging messages
# from the package's logger in en user code.
# This file should either be run from $REPO_ROOT (if rain is not installed)
# or anywhere (if rain is installed).
import logging
import sys
import rain

# Get the logger for this file. This logger won't have an effect on the
# rain's logger.
app_logger = logging.getLogger(__name__)
app_logger.setLevel(logging.DEBUG)
app_logger.addHandler(logging.StreamHandler(sys.stdout))
app_logger.info("This is a message from app_logger")

# Call a function that uses one of the loggers in rain to show that
# there won't be any effect until we add a handler to the loggers in rain.
print(rain.function_four())
print(rain.function_two(1))

# Get the "main" rain logger from $REPO_ROOT/rain/__init__.py. This is the
# parent of all other loggers defined in rain. We only need to set the level
# handler
rain_logger = logging.getLogger('rain')
rain_logger.setLevel(logging.DEBUG)
rain_logger.addHandler(logging.StreamHandler(sys.stdout))
rain_logger.info("This is a message from the 'main' rain_logger")

# We should now see the log line generated by the function.
print(rain.function_four())
print(rain.function_two(1))

# Note that both `app_logger` and `rain_logger` have `root` logger as their
# parent.
print(app_logger.root)
# <RootLogger root (WARNING)>
print(rain_logger.root)
# <RootLogger root (WARNING)>

# We can also see what handlers are attached to which loggers.
print(app_logger.handlers)
# [<StreamHandler <stdout> (NOTSET)>]
print(rain_logger.handlers)
# [<NullHandler (NOTSET)>, <StreamHandler <stdout> (NOTSET)>]
